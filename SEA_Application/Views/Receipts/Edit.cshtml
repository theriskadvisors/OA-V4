@model SEA_Application.Models.CashReceipt

@if (User.IsInRole("Admin"))
{
    Layout = "~/Views/Shared/_AdminDashboardLayout.cshtml";
}

else if (User.IsInRole("Receptionist"))
{
    Layout = "~/Views/Shared/_ReceptionistDashboardLayout.cshtml";

}
else if (User.IsInRole("BakeryAdmin"))
{
    Layout = "~/Views/Shared/_BakeryAdminDashboardLayout.cshtml";
}

else
{
    Layout = null;

}
<style>
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }

    #UserId {
        width: 250px;
    }
</style>

<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css" rel="stylesheet" />


<div class="card">
    <div class="card-body p-4">


        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="row">

                @*<input type="hidden" name="name" id="CourseTypeHidden" value="@Model.Course" />*@
                <input type="hidden" name="Id" id="" value="@Model.Id" />
                <input type="hidden" name="" id="HiddenValueReceivedFrom" value="@Model.ReceivedFrom" />
                <input type="hidden" name="" id="HiddenValueUserId" value="@Model.UserId" />

                <div class="col-md-2">

                    <div class="form-group">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Dated, htmlAttributes: new { @class = "control-label" })
                            <input type="date" id="Dated" name="Dated" value="@Model.Dated.Value.ToString("yyyy-MM-dd")" class="form-control" required />
                            @Html.ValidationMessageFor(model => model.Dated, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-2">
                    <div class="form-group">
                        <div class="col-md-12">

                            @*@Html.LabelFor(model => model.ReceiptNo, htmlAttributes: new { @class = "control-label" })*@
                            <label class="control-label">Receipt No</label>
                            <input type="text" id="ReceiptNo" name="ReceiptNo" value="@Model.ReceiptNo" class="form-control" required readonly />
                            @Html.ValidationMessageFor(model => model.ReceiptNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-8">

                </div>

                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-8">

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label class="control-label">Received From</label>
                                    <div class="input-group">
                                        <input type="text" readonly class="form-control" value="Contact" style="margin-top:10px;" aria-label="Text input with dropdown button">
                                        @*<div class="input-group-append">
                                                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="font-family: sans-serif">Dropdown</button>
                                                <div class="dropdown-menu">
                                                    <a class="dropdown-item" href="#" style="font-family: sans-serif">Other</a>
                                                    <a class="dropdown-item" href="#" style="font-family: sans-serif">Student</a>

                                                </div>
                                            </div>*@
                                        <div style="margin-top:15px;width:120px;">
                                            <select class="form-control drop" id="ReceivedFromDropDown" disabled>
                                                <option value="Other">Other</option>
                                                <option value="Student">Student</option>
                                            </select>
                                        </div>


                                        <label class="control-label" style="visibility:hidden">text </label>
                                        <div style="margin-top: 15px; width:250px ; display:none" id="StudentsDropdownDiv">
                                            @*<select name="course" style="width:250px;" class="form-control drop">
                                                    <option value="">select one</option>
                                                    <option value="css">css</option>
                                                    <option value="pms">pms</option>
                                                    <option value="one paper mcqs">one paper mcqs</option>
                                                </select>*@
                                            @*@Html.DropDownList("UserId", null, " Select One", htmlAttributes: new { required = "required",@class = "form-control drop", @id = "StudentDropDown" })*@

                                            <select class="form-control drop" id="UserId" name="UserId" disabled></select>
                                          

                                        </div>

                                        <div style="margin-top: 15px; width: 250px;" id="ReceivedFromInput">
                                            <input type="text" class="form-control" name="ReceivedFrom" id="ReceivedFrom" value="" />
                                        </div>

                                    </div>





                                </div>

                            </div>



                        </div> <!--end of col 3-->
                        @*<div class="col-md-2">



                            </div>*@


                    </div>

                </div>

                <div class="col-md-8">



                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @*<div class="form-group">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Dated, htmlAttributes: new { @class = "control-label" })


                @Html.ValidationMessageFor(model => model.Dated, "", new { @class = "text-danger" })

            </div>
        </div>*@

                    @*<div class="form-group">
            <div class="col-md-12">

                <label class="control-label">Received From</label>

                @Html.EditorFor(model => model.ReceivedFrom, new { htmlAttributes = new { @class = "form-control", @required = true } })
                @Html.ValidationMessageFor(model => model.ReceivedFrom, "", new { @class = "text-danger" })

            </div>
        </div>*@

                    <div class="form-group">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @required = true } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })


                        </div>
                    </div>

                    @*<div class="form-group">
            <div class="col-md-5">
                @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label" })

                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })

            </div>
        </div>*@
                    <div class="form-group" id="TotalFeeBlock" style="display:none">
                        <div class="col-md-5">

                            <label class="control-label">Total Fee</label>
                            <input type="text" id="TotalFee" readonly class="form-control" value="" style="margin-top:10px;" aria-label="Text input with dropdown button">
                            <input type="hidden" id="TotalFeeHidden" name="name" value="0" />

                        </div>
                    </div>

                    <div class="form-group" id="TotalFeeCollectedBlock" style="display:none">
                        <div class="col-md-5">
                            <label class="control-label">Total Fee Collected</label>
                            <input type="text" id="TotalFeeCollected" readonly class="form-control" value="0" style="margin-top:10px;" aria-label="Text input with dropdown button">


                        </div>
                    </div>


                    <div class="form-group" id="RemainingFeeBlock" style="display:none">
                        <div class="col-md-5">
                            <label class="control-label">Remaining Amount</label>
                            <input type="text" id="RemainingAmount" readonly class="form-control" value="0" style="margin-top:10px;" aria-label="Text input with dropdown button">


                        </div>
                    </div>


                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @type = "number", @min = "50", @required = true, @class = "form-control" } })
                            @*@Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })*@
                            <span id="error" style="color:red"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control" } })
                            @*@Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })*@
                            <span id="discountError" style="color:red"></span>
                        </div>
                    </div>


                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label" })
                            <input type="date" id="DueDate" value="@Model.DueDate.Value.ToString("yyyy-MM-dd")" name="DueDate" class="form-control" />
                            @*@Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })*@

                            <span id="dueDateError" style="color:red"></span>

                        </div>
                    </div>





                    <br />

                    <div class="form-group">
                        <div class="col-md-12">

                            <input id="FormSubmit" type="submit" value="Save" class="btn btn-primary rounded rounded-lg" />

                            <button type="button" id="cancel" onclick="redirect()" class="btn btn-primary rounded rounded-lg bg-transparent text-muted shadow-none mr-3">
                                <i class="material-icons mr-2">close</i>  Cancel
                            </button>
                        </div>

                    </div>
                </div>

            </div>
        }

    </div>
</div>


<script>
    $(document).ready(function () {

        $("#PageHeader").html("Edit Receipt"); 
       
        
        $(".drop").select2();
        $("#ReceivedFrom").prop('required', true);

        var hiddenReceivedFrom = $("#HiddenValueReceivedFrom").val();
        var hiddenUserId = $("#HiddenValueUserId").val();

        if (hiddenReceivedFrom != "") { //Other

         
            $("#ReceivedFromDropDown").val("Other").trigger('change');

            $("#ReceivedFrom").val(hiddenReceivedFrom);
            
            $("#ReceivedFromInput").css('display', "block");
            $("#StudentsDropdownDiv").css('display', "none");
            $("#UserId").prop('required', false);
            $("#ReceivedFrom").prop('required', true);

            $("#TotalFeeBlock").css('display', "none");
            $("#TotalFeeCollectedBlock").css('display', "none");
            $("#RemainingFeeBlock").css('display', "none");
            $("#TotalFee").val("");
            $("#TotalFeeCollected").val(0);
            $("#TotalFeeHidden").val(0);
            $("#RemainingAmount").val(0);

            //$("#FormSubmit").prop('disabled', false);
            $("#error").html("");
           
           
        }
        if (hiddenUserId != "") { //Student

            $("#ReceivedFromDropDown").val("Student").trigger('change');
            
            $("#ReceivedFromInput").css('display', "none");
            $("#StudentsDropdownDiv").css('display', "block");
            $("#UserId").prop('required', true);
            $("#ReceivedFrom").prop('required', false);
            $("#TotalFeeBlock").css('display', "block");
            $("#TotalFeeCollectedBlock").css('display', "block");
            $("#RemainingFeeBlock").css('display', "block");


            StudentFeeDetails(hiddenUserId);
        }


        $("#DueDate").bind('change', function () {

            //debugger
            var dob = $("#DueDate").val();
            var dob = dob.split("-");
            var date = new Date();

            var day = date.getDate();
            var month = date.getMonth() + 1;
            var year = date.getFullYear();

            if (dob[0] >= year) {
                //$('#ChallanForm').prop('disabled', false);



                $('#dueDateError').html("");
                if (dob[0] == year) {
                    if (dob[1] >= month) {
                        // $('#ChallanForm').prop('disabled', false);
                        $('#dueDateError').html("");
                        if (dob[1] == month) {
                            if (dob[2] >= day) {
                                //  $('#ChallanForm').prop('disabled', false);
                                $('#dueDateError').html("");
                            } else {
                                // $('#ChallanForm').prop('disabled', true);
                                $('#dueDateError').html("DueDate Should greater than today");
                            }
                        } else if (dob[1] < month) {
                            // $('#ChallanForm').prop('disabled', true);
                            $('#dueDateError').html("DueDate Should greater than today");
                        }
                    } else {
                        // $('#ChallanForm').prop('disabled', true);
                        $('#dueDateError').html("DueDate Should greater than today");
                    }
                }
            } else {
                // $('#ChallanForm').prop('disabled', true);
                $('#DueDate').html("DueDate Should greater than today");
            }

            // disableButton();

        });

        $.ajax({
            type: "POST",
            cache: false,
            url: "/Receipts/getStudentList",
            processData: false,
            contentType: false,
            success: function (data) {

                var sch = data;
                console.log(sch);
                var $el = $("#UserId");
                $el.empty();
                if (sch.length > 0) {
                    $el.append($("<option></option>")
                        .attr("value", "").text('Select Student'));
                    debugger


                    for (i = 0; i < sch.length; i++) {

                        $el.append($("<option></option>")
                            .attr("value", sch[i].UserId).text(sch[i].StudentName));

                    }
                }
                else {
                    $el.append($("<option></option>")
                        .attr("value", '').text('Select'));
                }
                $('#UserId').val('' + hiddenUserId +'').trigger('change');
            } //end of success 
        });//end of ajax

        //var now = new Date();

        //var day = ("0" + now.getDate()).slice(-2);
        //var month = ("0" + (now.getMonth() + 1)).slice(-2);

        //var today = now.getFullYear() + "-" + (month) + "-" + (day);

        ////  document.getElementById('Date').valueAsDate = output;

        //$("#Dated").val(today);

        //$("#ReceivedFromDropDown").change(function () {

        //    alert("Now Its Called");
        //    var dropdownValue = $(this).val();
        //    $("#Amount").val(0);
        //    $("#Discount").val(0);
        //    //   $("#FormSubmit").prop('disabled', false);
        //    $("#error").html("");
        //    $("#discountError").html("");

        //    if (dropdownValue == "Student") {

        //        $("#ReceivedFrom").val("");
        //        $("#ReceivedFromInput").css('display', "none");
        //        $("#StudentsDropdownDiv").css('display', "block");
        //        $("#UserId").prop('required', true);
        //        $("#ReceivedFrom").prop('required', false);
        //        $("#TotalFeeBlock").css('display', "block");
        //        $("#TotalFeeCollectedBlock").css('display', "block");
        //        $("#RemainingFeeBlock").css('display', "block");


        //    }
        //    else if (dropdownValue == "Other") {


        //        $('#UserId').val("").trigger('change');
        //        $("#ReceivedFromInput").css('display', "block");
        //        $("#StudentsDropdownDiv").css('display', "none");
        //        $("#UserId").prop('required', false);
        //        $("#ReceivedFrom").prop('required', true);
        //        $("#TotalFeeBlock").css('display', "none");
        //        $("#TotalFeeCollectedBlock").css('display', "none");
        //        $("#RemainingFeeBlock").css('display', "none");
        //        $("#TotalFee").val("");
        //        $("#TotalFeeCollected").val(0);
        //        $("#TotalFeeHidden").val(0);
        //        $("#RemainingAmount").val(0);

        //        //$("#FormSubmit").prop('disabled', false);
        //        $("#error").html("");


        //    }


        //})

        //$("#UserId").change(function () {
          
        //    var userId = $(this).val();
        //    //$("#TotalFeeHidden").val(0);
        //    //$("#TotalFee").val("");
        //    //$("#TotalFeeCollected").val(0);
        //    //$("#Amount").val(0);
        //    //$("#RemainingAmount").val(0);
        //    //$("#error").html("");

        //    if (userId != "") {
              

        //        $.ajax({

        //            type: "POST",
        //            url: '/Receipts/GetStudentFeeDetails',
        //            data: { "StudentId": userId },
        //            success: function (data) {
        //                console.log(data)
        //                $("#TotalFee").val(data.TotalFee);
        //                $("#TotalFeeCollected").val(data.TotalFeeCollected);
        //                $("#TotalFeeHidden").val(data.TotalFeeAmount);
        //                var TotalDiscount = data.TotalDiscount;

        //                var RemainingAmount = parseFloat(data.TotalFeeAmount) - parseFloat(data.TotalFeeCollected) - parseFloat(TotalDiscount);
        //                $("#RemainingAmount").val(RemainingAmount);

        //                //if (data.TopicExist == "Yes") {


        //                //    // $("#CreateBtn").attr("disabled", true);
        //                //    $("#ErrorOrderBy").html(data.Msg);
        //                //    //  $("#ErrorOrderBy").html("Selected order is already assigned to a lesson of same topic.");
        //                //}
        //                //else {

        //                //    $("#CreateBtn").attr("disabled", false);
        //                //    $("#ErrorOrderBy").html("");

        //                //}

        //            }
        //        })

        //    }

        //})

        $("#Amount").bind('keyup mouseup', function () {

            var Amount = $(this).val();
            var RemainingAmount = $("#RemainingAmount").val();
            //  $("#FormSubmit").prop('disabled', false);
            $("#error").html("");

            var ReceivedFromDropDown = $("#ReceivedFromDropDown").val();


            if (Amount == "") {
                Amount = 0
            }

            if (ReceivedFromDropDown == "Student") {


                if (parseFloat(Amount) > parseFloat(RemainingAmount)) {

                    //$("error")
                    //  $('#FormSubmit').prop('disabled', false);

                    $("#error").html("Entered amount cannot greater than remaining amount")
                    //$("#FormSubmit").prop('disabled', true);
                }

            }

            DiscountValidation();
            //  disableButton();


        }) //Amount

        $("#Discount").bind('keyup mouseup', function () {

            DiscountValidation();


        })

        $("form").submit(function () {
            //  $("#FormSubmit").prop('disabled', false);
            var error = $("#error").html();
            var discountError = $("#discountError").html();
            var dueDateError = $("#dueDateError").html();

            console.log("disable button");
            if (error != "" || discountError != "" || dueDateError != "") {
                // alert("called");

                // $("#FormSubmit").prop('disabled', true);
                return false;

            }
            else {
                // $("#FormSubmit").prop('disabled', false);
                return true;
            }

        });








        //    $.ajax({

        //        type: "POST",
        //        url: '/Receipts/GetReceiptNo',
        //        data: { },
        //        success: function (data) {


        //            $("#ReceiptNo").val(data);

        //            //if (data.TopicExist == "Yes") {


        //            //    // $("#CreateBtn").attr("disabled", true);
        //            //    $("#ErrorOrderBy").html(data.Msg);
        //            //    //  $("#ErrorOrderBy").html("Selected order is already assigned to a lesson of same topic.");
        //            //}
        //            //else {

        //            //    $("#CreateBtn").attr("disabled", false);
        //            //    $("#ErrorOrderBy").html("");

        //            //}

        //        }
        //    })

    });


    function DiscountValidation() {

        var Discount = $("#Discount").val();
        var Amount = $("#Amount").val();
        //  $("#FormSubmit").prop('disabled', false);
        $("#discountError").html("");

        if (Discount == "") {
            Discount = 0
        }
        if (Amount == "") {
            Amount = 0;
        }

        if (parseFloat(Discount) > parseFloat(Amount)) {
            $("#discountError").html("Discount cannot greater than entered amount")
            //     $("#FormSubmit").prop('disabled', true);
        }
        // disableButton();
    }
    function StudentFeeDetails(userId) {

        var Amount = $("#Amount").val();
        var Discount = $("#Discount").val();

        $.ajax({

            type: "POST",
            url: '/Receipts/GetStudentFeeDetails',
            data: { "StudentId": userId },
            success: function (data) {
                console.log(data)
                $("#TotalFee").val(data.TotalFee);
                var TotalFeeCollected = parseFloat(data.TotalFeeCollected) - parseFloat(Amount);
                $("#TotalFeeCollected").val(TotalFeeCollected);

                $("#TotalFeeHidden").val(data.TotalFeeAmount);
                var TotalDiscount = parseFloat(data.TotalDiscount) - parseFloat(Discount);

             //   var RemainingAmountCalculate = parseFloat(data.TotalFeeAmount) - parseFloat(TotalFeeCollected) - parseFloat(TotalDiscount);
              //  alert(TotalFeeCollected);
                var RemainingAmount = parseFloat(data.TotalFeeAmount) - parseFloat(TotalFeeCollected) - parseFloat(TotalDiscount);
                
                $("#RemainingAmount").val(RemainingAmount);

                //if (data.TopicExist == "Yes") {


                //    // $("#CreateBtn").attr("disabled", true);
                //    $("#ErrorOrderBy").html(data.Msg);
                //    //  $("#ErrorOrderBy").html("Selected order is already assigned to a lesson of same topic.");
                //}
                //else {

                //    $("#CreateBtn").attr("disabled", false);
                //    $("#ErrorOrderBy").html("");

                //}

            }
        })
    }
    function disableButton() {
        var error = $("#error").html();
        var discountError = $("#discountError").html();
        var dueDateError = $("#dueDateError").html();

        console.log("disable button");
        if (error != "" || discountError != "" || dueDateError != "") {
            //       $("#FormSubmit").prop('disabled', true);

        }
        else {
            //    $("#FormSubmit").prop('disabled', false);

        }
    }

    function redirect() {

        window.location.href = "/Receipts/Index";
    }



</script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>
